{
    "name": "Spring Boot GraphQL App Generator",
    "description": "Code generator that creates a Spring Boot app from a GraphQL schema.",
    "tags": [ "java", "Spring Boot", "graphql" ],
    "params": [
      {
        "name": "appName",
        "type": "text",
        "defaultValue": "demo",
        "description": "ie: example-api",
        "label": "Application Name",
        "required": true
      },
      {
        "name": "packageName",
        "type": "text",
        "defaultValue": "com.demo",
        "description": "ie: com.example.app",
        "required": true
      },
      {
        "name": "javaVersion",
        "type": "select",
        "values": [
          8, 11, 17
        ],
        "defaultValue": 11,
        "required": true
      },
      {
        "name": "typeMappings",
        "required": true,
        "type": "file",
        "fileType": "json",
        "hidden": true,
        "defaultValue": "{\"ID\":\"String\", \"Int\":\"Integer\", \"String\":\"String\"}",
        "description": "GraphQL to Java type mapping in JSON"
      },
      {
        "name": "graphqlScalars",
        "required": true,
        "type": "file",
        "fileType": "json",
        "hidden": true,
        "defaultValue": "[\"String\", \"Boolean\", \"Int\", \"Float\", \"ID\"]",
        "description": "GraphQL scalars defined by the specification"
      },
      {
        "name": "graphql",
        "type": "file",
        "fileType": "graphql",
        "description": "Paste your GraphQL schema here",
        "defaultValue": "type Tweet {\n    id: ID!\n    # The tweet text. No more than 140 characters!\n    body: String\n    # When the tweet was published\n    createdAt: DateTime\n    # Who published the tweet\n    author: String\n}\n\nscalar DateTime\n\ntype Query {\n    findTweetById(id: ID!): Tweet\n    listTweets(limit: Int, skip: Int, sort_field: String, sort_order: String): [Tweet]\n}\n\ntype Mutation {\n    createTweet (\n        body: String\n    ): Tweet\n}\n",
        "required": true
      }
    ],
    "preProcessing": {
      "pathReplacements": [
        { "target":  "demo-app", "replacement":  "{{appName}}"},
        { "target":  "com/demo", "replacement":  "{{strReplace packageName '.' '/'}}"},
        { "target":  "DemoApplication", "replacement":  "{{CamelCase appName}}Application"}
      ],
      "textReplacements": [
        { "target":  "demo-app", "replacement":  "{{appName}}"},
        { "target":  "com.demo", "replacement":  "{{packageName}}"},
        { "target":  "DemoApplication", "replacement":  "{{CamelCase appName}}Application"},
        { "target":  "GraphqlType", "replacement":  "{{_itemKey}}"},
        { "target":  "//#", "replacement":  ""}
      ]
    },
    "files": {
      "demo-app/.mvn": {
        "static": true
      },
      ".gitignore": {
        "condition": "false"
      },
      "README.md": {
        "condition": "false"
      },
      "demo-app/src/main/java/com/demo/domain/GraphqlType.java": {
        "iteratorJsonPath": "graphql.json.definitions",
        "fileNameExpr": "{{_itemKey}}.java",
        "condition": "_itemKey 'notIn' graphqlScalars.json"
      },
      "demo-app/src/main/java/com/demo/repository/GraphqlTypeRepository.java": {
        "iteratorJsonPath": "graphql.json.definitions",
        "fileNameExpr": "{{_itemKey}}Repository.java",
        "condition": "_itemKey 'notIn' graphqlScalars.json"
      },
      "demo-app/src/main/java/com/demo/service/GraphqlTypeService.java": {
        "iteratorJsonPath": "graphql.json.definitions",
        "fileNameExpr": "{{_itemKey}}Service.java",
        "condition": "_itemKey 'notIn' graphqlScalars.json"
      }
    }
}
